
import streamlit as st
import time
import os
from PIL import Image
import base64
import re

# Configure the page
st.set_page_config(
    page_title="AI Interview Assistant",
    page_icon="ðŸ¤–",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state variables
if "user" not in st.session_state:
    st.session_state.user = None
if "page" not in st.session_state:
    st.session_state.page = "login"
if "cv_uploaded" not in st.session_state:
    st.session_state.cv_uploaded = False
if "interview_completed" not in st.session_state:
    st.session_state.interview_completed = False
if "interview_in_progress" not in st.session_state:
    st.session_state.interview_in_progress = False
if "interview_results" not in st.session_state:
    st.session_state.interview_results = None
if "questions" not in st.session_state:
    st.session_state.questions = []
if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "answers" not in st.session_state:
    st.session_state.answers = []

# Custom CSS to style the app
def add_custom_css():
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stButton > button {
            width: 100%;
            border-radius: 5px;
            height: 3rem;
            font-weight: 600;
        }
        .auth-container {
            max-width: 500px;
            margin: 0 auto;
        }
        .page-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }
        .card {
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: white;
        }
        .sidebar-nav {
            padding: 1rem;
        }
        .interview-avatar {
            font-size: 3rem;
            text-align: center;
            margin-bottom: 1rem;
        }
        .pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% {
                opacity: 1;
            }
            50% {
                opacity: 0.5;
            }
            100% {
                opacity: 1;
            }
        }
        .result-score {
            font-size: 1.8rem;
            font-weight: 700;
            text-align: center;
        }
        .score-good {
            color: #3CB371;
        }
        .score-medium {
            color: #FFA500;
        }
        .score-bad {
            color: #DC143C;
        }
    </style>
    """, unsafe_allow_html=True)

# Navigation functions
def navigate_to(page):
    st.session_state.page = page

# Authentication functions
def login(email, password):
    # In a real app, check credentials against a database
    # This is a simplified demo implementation
    if email and password: # For demo purposes, any non-empty credentials work
        st.session_state.user = {
            "email": email, 
            "name": email.split('@')[0]
        }
        navigate_to("dashboard")
        return True
    return False

def register(name, email, password, password_confirm):
    # In a real app, save user to a database
    if not name or not email or not password:
        return False, "All fields are required"
    
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        return False, "Please enter a valid email address"
    
    if password != password_confirm:
        return False, "Passwords do not match"
    
    if len(password) < 6:
        return False, "Password must be at least 6 characters"
    
    # For demo purposes, successful registration always works
    st.session_state.user = {
        "email": email,
        "name": name
    }
    navigate_to("dashboard")
    return True, "Registration successful"

def logout():
    st.session_state.user = None
    navigate_to("login")

# CV Upload handling
def handle_cv_upload(uploaded_file):
    if uploaded_file is not None:
        # In a real app, save the file to a database or file system
        # For demo purposes, just mark as uploaded
        st.session_state.cv_uploaded = True
        return True
    return False

# Interview handling
def start_interview():
    st.session_state.interview_in_progress = True
    st.session_state.current_question = 0
    st.session_state.answers = []
    
    # Sample interview questions - in a real app, these would be generated by AI
    st.session_state.questions = [
        "Tell me about yourself and your background.",
        "What are your strengths and weaknesses?",
        "Why do you want to work for this company?",
        "Describe a challenge you faced at work and how you solved it.",
        "Where do you see yourself in five years?"
    ]

def submit_answer(answer):
    if st.session_state.current_question < len(st.session_state.questions):
        st.session_state.answers.append(answer)
        
        # Move to next question or complete interview
        if st.session_state.current_question == len(st.session_state.questions) - 1:
            complete_interview()
        else:
            st.session_state.current_question += 1

def complete_interview():
    st.session_state.interview_completed = True
    st.session_state.interview_in_progress = False
    
    # Generate mock results - in a real app, this would be generated by AI
    st.session_state.interview_results = {
        "overall_score": 82,
        "strengths": [
            "Clear communication skills",
            "Strong problem-solving approach",
            "Good cultural fit with the company"
        ],
        "improvements": [
            "Could provide more specific examples",
            "Consider more structured responses for technical questions"
        ],
        "question_scores": [
            {"question": st.session_state.questions[0], "score": 85, "feedback": "Good introduction, could have been more concise"},
            {"question": st.session_state.questions[1], "score": 78, "feedback": "Honest assessment, should emphasize how you're addressing weaknesses"},
            {"question": st.session_state.questions[2], "score": 90, "feedback": "Showed good research and enthusiasm for the company"},
            {"question": st.session_state.questions[3], "score": 82, "feedback": "Good example, could highlight results more clearly"},
            {"question": st.session_state.questions[4], "score": 75, "feedback": "Reasonable goals, could tie better to the role you're applying for"}
        ]
    }
    navigate_to("results")

# Render functions for each page
def render_login_page():
    st.markdown("<h1 class='page-title'>AI Interview Assistant</h1>", unsafe_allow_html=True)
    st.markdown("<div class='auth-container'>", unsafe_allow_html=True)
    
    st.markdown("<h2>Sign In</h2>", unsafe_allow_html=True)
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    
    email = st.text_input("Email", key="login_email")
    password = st.text_input("Password", type="password", key="login_password")
    
    if st.button("Sign In", key="login_button"):
        if login(email, password):
            st.success("Login successful!")
            st.experimental_rerun()
        else:
            st.error("Invalid email or password")
    
    st.markdown("</div>", unsafe_allow_html=True)
    st.markdown("<p>Don't have an account? <a href='#' onclick='STREAMLIT_COMPONENT.setComponentValue({value: \"signup\"})'>Sign up</a></p>", unsafe_allow_html=True)
    
    # Handle navigation from the link
    if st.experimental_get_query_params().get("nav") == ["signup"]:
        navigate_to("signup")
        st.experimental_rerun()
    
    # Alternative button navigation
    if st.button("Create an Account", key="goto_signup"):
        navigate_to("signup")
        st.experimental_rerun()
    
    st.markdown("</div>", unsafe_allow_html=True)

def render_signup_page():
    st.markdown("<h1 class='page-title'>AI Interview Assistant</h1>", unsafe_allow_html=True)
    st.markdown("<div class='auth-container'>", unsafe_allow_html=True)
    
    st.markdown("<h2>Create an Account</h2>", unsafe_allow_html=True)
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    
    name = st.text_input("Full Name", key="signup_name")
    email = st.text_input("Email", key="signup_email")
    password = st.text_input("Password", type="password", key="signup_password")
    password_confirm = st.text_input("Confirm Password", type="password", key="signup_password_confirm")
    
    if st.button("Sign Up", key="signup_button"):
        success, message = register(name, email, password, password_confirm)
        if success:
            st.success(message)
            st.experimental_rerun()
        else:
            st.error(message)
    
    st.markdown("</div>", unsafe_allow_html=True)
    st.markdown("<p>Already have an account? <a href='#' onclick='STREAMLIT_COMPONENT.setComponentValue({value: \"login\"})'>Sign in</a></p>", unsafe_allow_html=True)
    
    # Alternative button navigation
    if st.button("Back to Login", key="goto_login"):
        navigate_to("login")
        st.experimental_rerun()
    
    st.markdown("</div>", unsafe_allow_html=True)

def render_dashboard():
    st.markdown(f"<h1 class='page-title'>Dashboard</h1>", unsafe_allow_html=True)
    st.markdown(f"<p>Welcome, {st.session_state.user['name']}!</p>", unsafe_allow_html=True)
    
    # Create a 3-column layout for the dashboard cards
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### Upload CV")
        st.markdown("Upload your resume for AI analysis before the interview")
        if st.button("Upload CV", key="goto_upload"):
            navigate_to("upload_cv")
            st.experimental_rerun()
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### Start Interview")
        st.markdown("Begin your AI-powered interview session")
        if st.button("Start Interview", key="goto_interview"):
            navigate_to("interview")
            st.experimental_rerun()
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### Interview Results")
        st.markdown("View feedback and results from your previous interviews")
        if st.button("View Results", key="goto_results"):
            if st.session_state.interview_completed:
                navigate_to("results")
                st.experimental_rerun()
            else:
                st.warning("You need to complete an interview first")
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Logout button
    if st.button("Sign Out"):
        logout()
        st.experimental_rerun()

def render_upload_cv():
    st.markdown("<h1 class='page-title'>Upload CV</h1>", unsafe_allow_html=True)
    st.markdown("<p>Upload your resume or CV for analysis before your interview</p>", unsafe_allow_html=True)
    
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    uploaded_file = st.file_uploader("Choose your CV file", type=["pdf", "docx", "doc"])
    
    upload_description = st.text_area("Tell us about the position you're applying for", 
                                    height=100,
                                    placeholder="e.g., Senior Software Engineer with 5 years of experience in Python...")
    
    if st.button("Upload and Analyze"):
        if uploaded_file is not None:
            with st.spinner('Analyzing your CV...'):
                time.sleep(2)  # Simulate processing time
                success = handle_cv_upload(uploaded_file)
                if success:
                    st.success("CV uploaded and analyzed successfully!")
                    st.session_state.cv_uploaded = True
        else:
            st.error("Please upload a CV file")
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Show a preview of the analysis if CV is uploaded
    if st.session_state.cv_uploaded:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### CV Analysis Results")
        st.markdown("Here's what our AI found in your CV:")
        
        # Mock analysis results
        st.markdown("**Skills detected:**")
        st.markdown("- Python Programming (5 years)")
        st.markdown("- Data Analysis (3 years)")
        st.markdown("- Project Management (2 years)")
        
        st.markdown("**Education:**")
        st.markdown("- Bachelor's in Computer Science (2018)")
        
        st.markdown("**Recommendation:**")
        st.info("Your CV shows strong technical skills. The interview will focus on your problem-solving abilities and team collaboration experiences.")
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Navigation buttons
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Back to Dashboard"):
            navigate_to("dashboard")
            st.experimental_rerun()
    with col2:
        if st.button("Proceed to Interview"):
            navigate_to("interview")
            st.experimental_rerun()

def render_interview():
    st.markdown("<h1 class='page-title'>AI Interview</h1>", unsafe_allow_html=True)
    
    if not st.session_state.interview_in_progress:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### Ready to start your interview?")
        st.markdown("""
        This AI interview will ask you a series of questions about your experience and skills.
        Answer as you would in a real interview. Your responses will be analyzed to provide feedback.
        
        Tips:
        - Speak clearly and confidently
        - Provide specific examples from your experience
        - Be honest and authentic
        - Structure your answers using the STAR method (Situation, Task, Action, Result)
        """)
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Back to Dashboard"):
                navigate_to("dashboard")
                st.experimental_rerun()
        with col2:
            if st.button("Start Interview Now"):
                start_interview()
                st.experimental_rerun()
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    else:
        # Show the interview interface
        st.markdown("<div class='interview-avatar'>ðŸ¤–</div>", unsafe_allow_html=True)
        
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        current_q = st.session_state.current_question
        st.markdown(f"### Question {current_q + 1} of {len(st.session_state.questions)}")
        st.markdown(f"{st.session_state.questions[current_q]}")
        
        # Answer input
        answer = st.text_area("Your answer:", height=150, key=f"answer_{current_q}")
        
        # Recording simulation (just for UI effect)
        col1, col2 = st.columns([3, 1])
        with col1:
            if answer:
                if st.button("Submit Answer"):
                    with st.spinner('Processing your answer...'):
                        time.sleep(1)  # Simulate processing
                        submit_answer(answer)
                        st.experimental_rerun()
        with col2:
            st.markdown("<div class='pulse'>ðŸŽ¤ Listening...</div>", unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Show progress
        progress = (current_q + 1) / len(st.session_state.questions)
        st.progress(progress)
        
        # Option to end interview early
        if st.button("End Interview Early"):
            if len(st.session_state.answers) > 0:  # Ensure at least one question was answered
                complete_interview()
                st.experimental_rerun()
            else:
                st.error("Please answer at least one question before ending the interview")

def render_results():
    st.markdown("<h1 class='page-title'>Interview Results</h1>", unsafe_allow_html=True)
    
    if not st.session_state.interview_completed:
        st.warning("You haven't completed an interview yet. Please complete an interview to see results.")
        if st.button("Go to Interview"):
            navigate_to("interview")
            st.experimental_rerun()
        return
    
    results = st.session_state.interview_results
    
    # Overall score card
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("### Overall Assessment")
    
    score = results["overall_score"]
    score_class = "score-good" if score >= 80 else "score-medium" if score >= 60 else "score-bad"
    
    st.markdown(f"<div class='result-score {score_class}'>{score}/100</div>", unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Strengths")
        for strength in results["strengths"]:
            st.markdown(f"- {strength}")
    
    with col2:
        st.markdown("#### Areas for Improvement")
        for improvement in results["improvements"]:
            st.markdown(f"- {improvement}")
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Detailed question feedback
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("### Question-by-Question Feedback")
    
    for i, q_result in enumerate(results["question_scores"]):
        with st.expander(f"Question {i+1}: {q_result['question'][:50]}..."):
            st.markdown(f"**Your Answer:** {st.session_state.answers[i]}")
            st.markdown(f"**Score:** {q_result['score']}/100")
            st.markdown(f"**Feedback:** {q_result['feedback']}")
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Download report button (simulated)
    if st.download_button("Download Full Report (PDF)", 
                          data="Sample report content",
                          file_name="interview_report.pdf",
                          mime="application/pdf"):
        st.success("Report downloaded successfully!")
    
    # Navigation
    if st.button("Back to Dashboard"):
        navigate_to("dashboard")
        st.experimental_rerun()

# Main application
def main():
    add_custom_css()
    
    # Simple authentication check
    if st.session_state.user is None and st.session_state.page not in ["login", "signup"]:
        navigate_to("login")
    
    # Render the appropriate page
    if st.session_state.page == "login":
        render_login_page()
    elif st.session_state.page == "signup":
        render_signup_page()
    elif st.session_state.page == "dashboard":
        render_dashboard()
    elif st.session_state.page == "upload_cv":
        render_upload_cv()
    elif st.session_state.page == "interview":
        render_interview()
    elif st.session_state.page == "results":
        render_results()

if __name__ == "__main__":
    main()
